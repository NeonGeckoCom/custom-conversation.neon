{
    "title": "Custom Conversations",
    "url": "https://github.com/NeonGeckoCom/skill-custom_conversation",
    "summary": "Create your own or use text script files shared by other users.",
    "short_description": "Create your own or use text script files shared by other users.",
    "description": "Skill, which works using the custom text parsing implementation, provides the functionality to create, share, modify, and use any script files obtained from the shared library.",
    "examples": [
        "tell me available script files",
        "what scripts are available",
        "update my conversations",
        "update my skill files",
        "set my startup script to"
    ],
    "desktopFile": false,
    "warning": "",
    "systemDeps": false,
    "requirements": {
        "python": [
            "bs4",
            "gitpython~=3.1",
            "neon-utils>=0.5.7"
        ],
        "system": {},
        "skill": []
    },
    "incompatible_skills": [],
    "platforms": [
        "i386",
        "x86_64",
        "ia64",
        "arm64",
        "arm"
    ],
    "branch": "master",
    "license": "Unknown",
    "icon": "https://0000.us/klatchat/app/files/neon_images/icons/neon_skill.png",
    "category": "Configuration",
    "categories": [
        "Configuration"
    ],
    "tags": [
        "Neongecko",
        "Neon",
        "CustomConversations",
        "Custom"
    ],
    "credits": [
        "reginaneon",
        "NeonDaniel",
        "neongeckocom"
    ],
    "skillname": "skill-custom_conversation",
    "authorname": "NeonGeckoCom",
    "foldername": null,
    "script keywords and spacing": "Neon scripts follow the Python convention of 4 spaces to indent subordinate lines. A line without a command will be considered a subordinate of the previous line that has one fewer indent; for example, all of the lines below after `Neon speak:` would be spoken:     Neon speak:         \"Say 1 or World Times for world times\"         \"Say 2 or World Weather for world weather\"         \"Say 3 or World Populations for world populations\" There are multiple keywords available and new ones are added frequently. The current list, starting with the core example above: #### Neon speak Have Neon say something. A single line to speak can be on the same line as `Neon speak:`. If multiple lines are to be spoken, they should follow `Neon speak:` and be indented. SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). ``` Neon speak: \"Hello World. Say anything or exit\" ``` ``` Neon speak:     \"Say 1 or World Times for world times\"     \"Say 2 or World Weather for world weather\"     \"Say 3 or World Populations for world populations\" ``` #### Name speak Have Neon say something with the specified name. Name is required, gender and language may optionally be specified as comma-separated parameters. If one of gender or language are specified, the other will use the user's profile setting or script setting if available. SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). SSML is supported in `Neon speak` and `Name speak` commands if they are supported by the selected TTS engine. Examples of ssml supported by Amazon Polly can be found [here](https://docs.aws.amazon.com/polly/latest/dg/supportedtags.html). ``` Name Speak: Nobody, \"Or I can speak as someone else.\" ``` ``` Name Speak: Slow Male, male, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\" ``` ``` Name Speak: English Male, male, en-us, \"<prosody volume=\"-2dB\" rate=\"x-slow\" pitch=\"x-low\">I can be quiet, slow, and deep</prosody>\" ``` #### Reconvey Reconvey can be used in two ways: one in which a user's prior input to the script is used, and another in which specified audio files are played back. In the first method, Neon plays back a user's original audio input (if available) and prints the transcription. The last value of the passed variable is used with the last audio_file available for that variable. No Text-To-Speech will be generated, so nothing will be played if there is no input audio to use. *Note: The variable named should not be enclosed in braces unless its value is the name of the variable to be spoken* ``` voice_input(var_to_use) ... Reconvey: var_to_use ``` In the second method, a quoted text string or variable is provided along with a specified audio file. The audio file may be a public URL, an absolute path to a local file, or the filename of a file saved in `script_audio/{script title}/` within the skill directory. ``` Reconvey: var_to_use, \"https://my_website/files/audio_to_play.mp3\" ``` ``` Reconvey: \"This literal will be printed\", \"audio_file_in_script_directory.wav\" ``` ``` Reconvey: \"Literal to print\", \"~/Music/audio-file.mp3\" ``` #### Execute String to be executed as if spoken by a user. A single line to execute can be on the same line as `Execute:`. If multiple lines are to be executed, they should follow `Execute:` and be indented. When a string is executed, Neon will wait several seconds for a response before continuing. *Any commands will be executed as if a wake word was heard, so \"Neon\" is not required in front of any commands*. ``` Execute: \"What time is it in Athens\" ``` ``` Execute:     \"translate cherry to russian\"     \"tell me my language setting     \"speak to me in english     \"speak to me in Russian and French     \"speak to me in english ``` #### Tag Lines with `@` as the first non-whitespace character will be indexed as Goto tag lines. A tag line should be one word and contain only a string label. ``` @test_tag ``` ####Goto Command to go to the specified line or [tag](#tag) in the script. The argument to this command can be either a file line number (the line specified will be executed next) or a [tag](#tag) that is defined in the script (the line following the tag will be executed next). Tags may reference a line at any position in the file. *When writing a script with Goto commands, avoid entering your script at [case](#case) option lines and consider where variables are set to avoid using a variable before setting it (i.e. with [voice_input](#voice_input).* ``` Goto: test_tag ``` ``` Goto: 5 ``` #### Comments Lines with `#` as the first non-whitespace character will not be executed. Comment lines are useful for annotating a script or removing problematic lines when troubleshooting. (ex. you remove a line and leave a comment for why the line is commented out). Block comments are also allowed where blocks start and end with `\"\"\"`. ```"
}